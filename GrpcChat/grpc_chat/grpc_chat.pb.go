// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc_chat.proto

/*
Package grpc_chat is a generated protocol buffer package.

It is generated from these files:
	grpc_chat.proto

It has these top-level messages:
	Count
	Names
	Msg
*/
package grpc_chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Count struct {
	Count  int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *Count) Reset()                    { *m = Count{} }
func (m *Count) String() string            { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()               {}
func (*Count) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Count) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Count) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type Names struct {
	FirstName  string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	SecondName string `protobuf:"bytes,2,opt,name=secondName" json:"secondName,omitempty"`
}

func (m *Names) Reset()                    { *m = Names{} }
func (m *Names) String() string            { return proto.CompactTextString(m) }
func (*Names) ProtoMessage()               {}
func (*Names) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Names) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Names) GetSecondName() string {
	if m != nil {
		return m.SecondName
	}
	return ""
}

type Msg struct {
	Sender string `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Msg) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Msg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*Count)(nil), "grpc_chat.Count")
	proto.RegisterType((*Names)(nil), "grpc_chat.Names")
	proto.RegisterType((*Msg)(nil), "grpc_chat.Msg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatService service

type ChatServiceClient interface {
	ExchangeNames(ctx context.Context, in *Names, opts ...grpc.CallOption) (*Names, error)
	GetList(ctx context.Context, in *Count, opts ...grpc.CallOption) (ChatService_GetListClient, error)
	SendList(ctx context.Context, opts ...grpc.CallOption) (ChatService_SendListClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) ExchangeNames(ctx context.Context, in *Names, opts ...grpc.CallOption) (*Names, error) {
	out := new(Names)
	err := grpc.Invoke(ctx, "/grpc_chat.ChatService/ExchangeNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetList(ctx context.Context, in *Count, opts ...grpc.CallOption) (ChatService_GetListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[0], c.cc, "/grpc_chat.ChatService/GetList", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceGetListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_GetListClient interface {
	Recv() (*Names, error)
	grpc.ClientStream
}

type chatServiceGetListClient struct {
	grpc.ClientStream
}

func (x *chatServiceGetListClient) Recv() (*Names, error) {
	m := new(Names)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SendList(ctx context.Context, opts ...grpc.CallOption) (ChatService_SendListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[1], c.cc, "/grpc_chat.ChatService/SendList", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSendListClient{stream}
	return x, nil
}

type ChatService_SendListClient interface {
	Send(*Names) error
	CloseAndRecv() (*Count, error)
	grpc.ClientStream
}

type chatServiceSendListClient struct {
	grpc.ClientStream
}

func (x *chatServiceSendListClient) Send(m *Names) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceSendListClient) CloseAndRecv() (*Count, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Count)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[2], c.cc, "/grpc_chat.ChatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatClient{stream}
	return x, nil
}

type ChatService_ChatClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type chatServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	ExchangeNames(context.Context, *Names) (*Names, error)
	GetList(*Count, ChatService_GetListServer) error
	SendList(ChatService_SendListServer) error
	Chat(ChatService_ChatServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_ExchangeNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Names)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ExchangeNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_chat.ChatService/ExchangeNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ExchangeNames(ctx, req.(*Names))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Count)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).GetList(m, &chatServiceGetListServer{stream})
}

type ChatService_GetListServer interface {
	Send(*Names) error
	grpc.ServerStream
}

type chatServiceGetListServer struct {
	grpc.ServerStream
}

func (x *chatServiceGetListServer) Send(m *Names) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_SendList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).SendList(&chatServiceSendListServer{stream})
}

type ChatService_SendListServer interface {
	SendAndClose(*Count) error
	Recv() (*Names, error)
	grpc.ServerStream
}

type chatServiceSendListServer struct {
	grpc.ServerStream
}

func (x *chatServiceSendListServer) SendAndClose(m *Count) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceSendListServer) Recv() (*Names, error) {
	m := new(Names)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Chat(&chatServiceChatServer{stream})
}

type ChatService_ChatServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type chatServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeNames",
			Handler:    _ChatService_ExchangeNames_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetList",
			Handler:       _ChatService_GetList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendList",
			Handler:       _ChatService_SendList_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _ChatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_chat.proto",
}

func init() { proto.RegisterFile("grpc_chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xdd, 0x4a, 0xc3, 0x40,
	0x10, 0x85, 0xd9, 0xd6, 0xd4, 0x66, 0x44, 0x2d, 0x83, 0x48, 0x09, 0x22, 0x92, 0xab, 0xe0, 0x45,
	0x1a, 0x2c, 0xbe, 0x40, 0x4b, 0xe9, 0x8d, 0x15, 0x69, 0x1f, 0x40, 0xe2, 0x66, 0xf2, 0x03, 0x66,
	0x37, 0xec, 0xae, 0xd2, 0xd7, 0xf4, 0x8d, 0x64, 0xb7, 0xc1, 0xd4, 0xe6, 0x6e, 0xce, 0x37, 0x73,
	0xce, 0x4c, 0xb2, 0x70, 0x5d, 0xa8, 0x86, 0xbf, 0xf3, 0x32, 0x35, 0x71, 0xa3, 0xa4, 0x91, 0xe8,
	0xff, 0x81, 0xf0, 0x19, 0xbc, 0xa5, 0xfc, 0x12, 0x06, 0x6f, 0xc0, 0xe3, 0xb6, 0x98, 0xb2, 0x07,
	0x16, 0x79, 0xdb, 0x83, 0xc0, 0x5b, 0x18, 0xc9, 0x3c, 0xd7, 0x64, 0xa6, 0x03, 0x87, 0x5b, 0x15,
	0xae, 0xc0, 0x7b, 0x4d, 0x6b, 0xd2, 0x78, 0x07, 0x7e, 0x5e, 0x29, 0x6d, 0xac, 0x72, 0x56, 0x7f,
	0xdb, 0x01, 0xbc, 0x07, 0xd0, 0xc4, 0xa5, 0xc8, 0x5c, 0x7b, 0xe0, 0xda, 0x47, 0x24, 0x9c, 0xc1,
	0x70, 0xa3, 0x0b, 0xbb, 0x45, 0x93, 0xc8, 0x48, 0xb5, 0x09, 0xad, 0xc2, 0x09, 0x0c, 0x6b, 0x5d,
	0xb4, 0x3e, 0x5b, 0x3e, 0xfd, 0x30, 0xb8, 0x58, 0x96, 0xa9, 0xd9, 0x91, 0xfa, 0xae, 0x38, 0xe1,
	0x1c, 0x2e, 0x57, 0x7b, 0x5e, 0xa6, 0xa2, 0xa0, 0xc3, 0x3d, 0x93, 0xb8, 0xfb, 0x58, 0x47, 0x82,
	0x1e, 0xc1, 0x19, 0x9c, 0xaf, 0xc9, 0xbc, 0x54, 0xda, 0xfc, 0x1b, 0x77, 0xff, 0xa1, 0x3f, 0x9e,
	0x30, 0x4c, 0x60, 0xbc, 0x23, 0x91, 0xf5, 0x1c, 0xfd, 0x05, 0x2e, 0x23, 0x62, 0xf8, 0x08, 0x67,
	0xf6, 0x4c, 0xbc, 0x3a, 0xea, 0x6d, 0x74, 0x11, 0x9c, 0xe8, 0x88, 0x25, 0x6c, 0x11, 0x41, 0x50,
	0x49, 0xc7, 0x63, 0xda, 0xa7, 0x75, 0xf3, 0x49, 0xba, 0x9b, 0x5a, 0x8c, 0xd7, 0xaa, 0xe1, 0x36,
	0xeb, 0x8d, 0x7d, 0x8c, 0xdc, 0xf3, 0xcd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x54, 0x71,
	0xfc, 0xd1, 0x01, 0x00, 0x00,
}
